---
- name: Install Xcode 13.2 on macOS
  hosts: macOS
  gather_facts: yes
  become: yes
  
  vars:
    xcode_version: "13.2"
    xcode_path: "/Applications/Xcode.app"
    xcode_command_line_tools_path: "/Library/Developer/CommandLineTools"
    
  tasks:
    - name: Check if Xcode is already installed
      stat:
        path: "{{ xcode_path }}"
      register: xcode_installed
      
    - name: Check if Command Line Tools are installed
      stat:
        path: "{{ xcode_command_line_tools_path }}"
      register: command_line_tools_installed
      
    - name: Display current Xcode installation status
      debug:
        msg: 
          - "Xcode installed: {{ xcode_installed.stat.exists }}"
          - "Command Line Tools installed: {{ command_line_tools_installed.stat.exists }}"
          
    - name: Install Command Line Tools if not present
      shell: xcode-select --install
      args:
        creates: "{{ xcode_command_line_tools_path }}"
      when: not command_line_tools_installed.stat.exists
      register: clt_install
      
    - name: Wait for Command Line Tools installation to complete
      shell: xcode-select -p
      register: xcode_select_result
      until: xcode_select_result.rc == 0
      retries: 30
      delay: 10
      when: not command_line_tools_installed.stat.exists
      
    - name: Accept Xcode license agreement
      shell: xcodebuild -license accept
      when: xcode_installed.stat.exists or command_line_tools_installed.stat.exists
      
    - name: Download Xcode 13.2 from Apple Developer Portal
      uri:
        url: "https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_{{ xcode_version }}/Xcode_{{ xcode_version }}.xip"
        dest: "/tmp/Xcode_{{ xcode_version }}.xip"
        headers:
          Cookie: "{{ developer_cookie | default('') }}"
        status_code: [200, 302]
      when: not xcode_installed.stat.exists
      register: xcode_download
      
    - name: Extract Xcode 13.2
      shell: xip -x "/tmp/Xcode_{{ xcode_version }}.xip" -d /tmp/
      when: 
        - not xcode_installed.stat.exists
        - xcode_download is changed
      register: xcode_extract
      
    - name: Move Xcode to Applications folder
      copy:
        src: "/tmp/Xcode.app"
        dest: "/Applications/"
        remote_src: yes
      when: 
        - not xcode_installed.stat.exists
        - xcode_extract is changed
      register: xcode_move
      
    - name: Set Xcode as active developer tool
      shell: sudo xcode-select --switch "{{ xcode_path }}"
      when: xcode_move is changed
      
    - name: Install Xcode components
      shell: sudo xcodebuild -runFirstLaunch
      when: xcode_move is changed
      
    - name: Verify Xcode installation
      shell: xcodebuild -version
      register: xcode_version_check
      when: xcode_installed.stat.exists or xcode_move is changed
      
    - name: Display Xcode version
      debug:
        msg: "{{ xcode_version_check.stdout }}"
      when: xcode_version_check is defined
      
    - name: Clean up temporary files
      file:
        path: "/tmp/Xcode_{{ xcode_version }}.xip"
        state: absent
      when: xcode_download is changed
      
    - name: Clean up extracted files
      file:
        path: "/tmp/Xcode.app"
        state: absent
      when: xcode_extract is changed
      
  handlers:
    - name: restart system
      shell: sudo shutdown -r now
      async: 0
      poll: 0
```

**Important Notes:**

1. **Apple Developer Account Required**: You'll need to be logged into your Apple Developer account to download Xcode. You may need to set the `developer_cookie` variable with your authentication cookie.

2. **Alternative Installation Method**: If you prefer to install Xcode from the Mac App Store, you can use this alternative approach:

```yaml:Ansible/macOS/xcode_install_appstore.yaml
---
- name: Install Xcode 13.2 from Mac App Store
  hosts: macOS
  gather_facts: yes
  become: yes
  
  tasks:
    - name: Install Xcode from Mac App Store
      community.general.mas:
        name: "Xcode"
        state: present
      register: mas_install
      
    - name: Wait for Xcode installation to complete
      shell: xcodebuild -version
      register: xcode_version_check
      until: xcode_version_check.rc == 0
      retries: 60
      delay: 30
      when: mas_install is changed
      
    - name: Accept Xcode license
      shell: xcodebuild -license accept
      when: mas_install is changed
      
    - name: Install Xcode components
      shell: sudo xcodebuild -runFirstLaunch
      when: mas_install is changed
```

**To run the playbook:**

```bash
# For the direct download method:
ansible-playbook -i hosts macOS/xcode_install.yaml

# For the Mac App Store method (requires mas-cli):
ansible-playbook -i hosts macOS/xcode_install_appstore.yaml
```

**Prerequisites:**
- Ensure your macOS hosts are accessible via SSH
- For the Mac App Store method, install `mas-cli` first: `brew install mas`
- Make sure you're signed into the Mac App Store on the target machines

The playbook includes proper error handling, verification steps, and cleanup procedures. Choose the method that best fits your environment and requirements. 